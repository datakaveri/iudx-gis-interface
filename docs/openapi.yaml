openapi: 3.0.2

schemes:
  - "http"
  - "https"

produces:
  - "application/json"
  - "text/plain"

consumes:
  - "application/json"
  - "text/plain"

info:
  title: "Data Exchange GIS Interface APIs"
  version: 5.0.0
  description: |
    # Introduction
    
    The GIS interface is a resource server which defines the interactions between the consumers interested in GIS data and the upstream GIS Servers.
    It allows data *admins* to publish gis related info as per the Data Exchange(DX) .
    It enables *Consumers* of datasources to search and query for data using HTTPs APIs.
    
    
    # Configurations
    - **Server**:
        - In the doc, we display the server url to be https://example-gis.com with the hostname as example-gis.com
        - This could be configured according to the deployment
    - **Base path**:
        - Base path is the path on which API is served, relative to the host
        - It is the initial part of the API
        - The base path value could be configured according to the deployment
        - The base path for [DX AAA Server](https://github.com/datakaveri/iudx-aaa-server) is set to `/auth/v1`
        - The base path for [DX Catalogue Server](https://github.com/datakaveri/iudx-catalogue-server) is set to `/iudx/cat/v1`
        - Currently, `/entities` (Latest search) APIs have `/ngsi-ld/v1` base path and `/serverInfo` (Admin) APIs have `/admin/gis` as base path
          <br>
    - **Request Samples**:
        - The `<tokeValue>` in the header of request sample could be replaced with respective token value [Also refer Tokens section [here](#section/Tokens)]
        - The `<payload>` in the request sample could be replaced with the payload given adjacent to the request sample
    
    
    
    # Tokens
    All the <b>*API*</b>  calls to the gis interface should now contain a valid DX auth token presented in the query header. To search (or) access a *Secure / Closed* resource, a consumer must get a token for the *Secure / Closed* resource along with the associated constraints from the DX Auth Server. For publication of a resource, a consumer must get a token along with the associated constraints from the DX Auth Server.
    
    
    # API HTTP Responses
    Apart from the response codes specified in each API, the API server may respond with certain 4xx and 5xx error codes which are related to common API Gateway behaviours.
    The application should address them accordingly.

  contact:
    name: For support contact DX Team at
    email: support@iudx.org.in

tags:
  - name: Latest Search
    x-displayName: "Latest Data"
    description: |
      A entity search is used by DX(Data Exchange) Data *Consumers* for querying a resource using a <b>valid DX</b> `id`. <br/> 

  - name: Admin API
    x-displayName: "Admin Apis"
    description: |
      This API allows an admin to post, put or delete gis related info as per DX .

servers:
  - url: https://example-gis.com/ngsi-ld/v1
    description: Deployment Server

paths:

  /entities:
    get:
      tags:
        - Latest Search
      summary: Latest URL
      operationId: latest-entities
      parameters:
        - name: token
          in: header
          description: A <b> valid DX Auth token </b> to process the request. <br/> This field is <b> mandatory </b> for accessing a <b> resource </b> .  <br/> If not provided with a valid token, user will be responded with <b> 401 Unauthorized </b> .
          required: true
          schema:
            type: string
            maxLength: 512
            pattern: '^[a-zA-Z0-9\/\@\.]*$'

        - name: id
          in: query
          description: A <b> valid DX `ID` </b> of the resource.
          required: true
          schema:
            type: string
            maxLength: 512

      x-codeSamples:
        - lang: 'cURL'
          label: 'get latest data'
          source: |
            curl --location --request GET 'https://example-gis.com/ngsi-ld/v1/entities?id=d33533e6-ab10-4918-8ea1-4390c68fb464' \
            --header 'token: <tokenValue>'

      responses:
        200:
          description: 'Successful query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityresponse'
        204:
          description: 'Empty Response'


        401:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardInvalidTokenErrorResponse"
          description: 'Unauthorized'

        404:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardResourceNotFoundErrorResponse"
          description: 'Resource not found'


      description: |
        This <b> API </b> is used to get the data of a resource. <br /> It uses the <b> DX(Data Exchange) ID </b> a.k.a `id` to query the resource server. <br />  To get data a <b> valid DX Auth token</b> is mandatory.  <br/> The `/entities` end point followed by `id` as a <b>query parameter</b> is used to get the latest data.

  /serverInfo:
    servers:
      - url: https://example-gis.com/admin/gis
        description: Deployment Server
    post:
      tags:
        - Admin API
      summary: Publish GIS information
      operationId: registergisinforequest
      parameters:
        - name: token
          in: header
          description: 'DX auth token for accessing API.'
          required: true
          style: simple
          schema:
            type: string
            maxLength: 512
            pattern: '^[a-zA-Z0-9\/\@\.]*$'

      x-codeSamples:
        - lang: 'cURL'
          label: 'create a GIS entry'
          source: |
            curl --location --request POST 'https://example-gis.com/admin/gis/serverInfo' \
            --header 'token: <tokenValue>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'


      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registergisinforequest'
        required: true
      responses:
        200:
          description: 'Successful query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardSuccessResponse'

        400:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InvalidIdPatternErrorResponse"
          description: 'Bad query'

        401:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardInvalidTokenErrorResponse"
          description: 'Unauthorized'

        409:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/resourceAlreadyExistErrorResponse"
          description: 'Conflict'

      description: |
        Post Admin API allows an admin to publish the GIS info into the database. Based on the input provided, the API validates the access control of the user with DX Auth server to allow or deny access to the API.

    put:
      tags:
        - Admin API
      summary: Update GIS information
      operationId: editGisInfoRequest
      parameters:
        - name: token
          in: header
          description: 'DX auth token for accessing API.'
          required: true
          style: simple
          schema:
            type: string
            maxLength: 512
            pattern: '^[a-zA-Z0-9\/\@\.]*$'

      x-codeSamples:
        - lang: 'cURL'
          label: 'update GIS entry'
          source: |
            curl --location --request PUT 'https://example-gis.com/admin/gis/serverInfo' \
            --header 'token: <tokenValue>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'


      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editgisinforequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardSuccessResponse'
          description: 'Successful query'

        400:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InvalidIdPatternErrorResponse"
          description: 'Bad query'

        401:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardInvalidTokenErrorResponse"
          description: 'Unauthorized'


        404:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InvalidResourceIdErrorResponse"
          description: 'Resource not found'


      description: |
        Put Admin API allows an admin to update the GIS info present. Based on the input provided, the API validates the access control of the user with DX Auth server to allow or deny access to the API.

    delete:
      tags:
        - Admin API
      summary: Delete GIS information
      operationId: deleteInfo
      parameters:
        - name: token
          in: header
          description: 'DX auth token for accessing API.'
          required: true
          style: simple
          schema:
            type: string
            maxLength: 512
            pattern: '^[a-zA-Z0-9\/\@\.]*$'

        - name: id
          in: query
          description: 'id of the GIS information.'
          required: true
          style: simple
          schema:
            type: string
            maxLength: 512

      x-codeSamples:
        - lang: 'cURL'
          label: 'delete GIS entry'
          source: |
            curl --location --request DELETE 'https://example-gis.com/admin/gis/serverInfo?id=d33533e6-ab10-4918-8ea1-4390c68fb465' \
            --header 'token: <tokenValue>'
      

      responses:
        200:
          description: 'Successful query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/standardSuccessResponse'

        400:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/deleteInfoBadRequestErrorResponse"
          description: 'Bad query'

        401:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/standardInvalidTokenErrorResponse"
          description: 'Unauthorized'


        404:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IdDoesNotExistErrorResponse"
          description: 'Resource not found'

      description: |
        Delete admin API allows an admin to delete Gis information. Based on the input provided, the API validates the access control of the user with DX Auth server to allow or deny access to the API. 


components:
  schemas:

    registergisinforequest:
      title: registergisinforequest
      required:
        - id
        - server
        - server-port
        - isSecure
      type: object
      properties:
        id:
          type: string
        server:
          type: string
        server-port:
          type: integer
        isSecure:
          type: boolean
      example:
        id:
          "d33533e6-ab10-4918-8ea1-4390c68fb464"
        server: "https://example-gis.com/apis"
        server-port: 1234
        isSecure: false

    editgisinforequest:
      title: editgisinforequest
      required:
        - id
        - server-url
        - server-port
        - isSecure
        - accessInfo
      type: object
      properties:
        id:
          type: string
        server-url:
          type: string
        server-port:
          type: integer
        isSecure:
          type: boolean
        accessInfo:
          type: object
          properties:
            username:
              type: string
            password:
              type: string
            tokenURL:
              type: string
          required:
            - username
            - password
            - tokenURL
      example:
        "id": "d33533e6-ab10-4918-8ea1-4390c68fb465"
        "server-url": "https://example-gis.com/apis"
        "server-port": 1234
        "isSecure": true
        "accessInfo":
          {
            "username": "username",
            "password": "pass",
            "tokenURL": "URL"
          }

    entityresponse:
      title: entityresponse
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        results:
          description: An array of objects
          type: array
          items:
            type: object
      example:
        type: urn:dx:rs:success
        title: Successful Operation
        results: [
          {
            "iudx_resource_id": "d33533e6-ab10-4918-8ea1-4390c68fb464",
            "url": "https://map.varanasismartcity.gov.in/varanasismartcity",
            "isopen": true,
            "port": 123,
            "created_at": "2022-03-24T08:31:07.341533",
            "modified_at": "2022-03-25T12:38:26.975070",
            "username": "someUsername",
            "password": "somePassword",
            "tokenurl": "someTokenurl"
          }
        ]


    standardSuccessResponse:
      title: standardSuccessResponse
      properties:
        type:
          type: string
        title:
          type: string
        results:
          description: An array of objects
          type: array
          items:
            type: object
      example:
        type: urn:dx:rs:success
        title: Successful Operation
        detail: Success

    standardInvalidTokenErrorResponse:
      title: standardInvalidTokenErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:invalidAuthorizationToken
        title: Not Authorized
        detail: Not Authorized

    standardResourceNotFoundErrorResponse:
      title: standardResourceNotFoundErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:resourceNotFound
        title: Not Found
        detail: Not Found


    InvalidIdPatternErrorResponse:
      title: InvalidIdPatternErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:invalidPayloadFormat
        title: Bad Request
        detail: "Validation error : Invalid id"

    InvalidResourceIdErrorResponse:
      title: InvalidResourceIdErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:resourceNotFound
        title: Not Found
        detail: Update operation failed because passed resource ID does not exist in DB

    deleteInfoBadRequestErrorResponse:
      title: deleteInfoBadRequestErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:invalidPayloadFormat
        title: Bad Request
        detail: "Validation error : Invalid id"

    resourceAlreadyExistErrorResponse:
      title: resourceAlreadyExistErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:resourceAlreadyExists
        title: Conflict
        detail: Insert operation failed because given resource ID already exists in the DB

    IdDoesNotExistErrorResponse:
      title: IdDoesNotExistErrorResponse
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
      example:
        type: urn:dx:rs:resourceNotFound
        title: Not Found
        detail: Given resource ID does not exist in DB